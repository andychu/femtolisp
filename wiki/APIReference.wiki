#summary Library and extended functionality reference

= Builtin special forms =
|| *signature* || *description* ||
|| `(quote val)` || ||
|| `(cond (cond1 do1 do2 ...) (cond2 do1 do2 ...) ...)` || ||
|| `(if cond then else)` || ||
|| `(and ...)` || ||
|| `(or ...)` || ||
|| `(while cond body)` || ||
|| `(lambda args body)` || `args` is a list or dotted list. `body` must be a single expression ||
|| `(progn ...)` || ||
|| `(trycatch body func)` || if an exception occurs evaluating `body`, `func` is invoked with the exception as its argument ||

= Standard builtin functions =
`eq, atom, not, symbolp, numberp, boundp, consp, builtinp, vectorp, fixnump, equal, cons, car, cdr, rplaca, rplacd, eval, apply, set, prog1, +, -, *, /, <, aref, aset, length, assoc`

= Nonstandard builtin functions =
|| *signature* || *description* ||
|| `(raise val)` || raise an exception (any value) ||
|| `(compare a b)` || perform an ordered comparison of any two values. returns -1, 0, or 1, for a<b, a==b, and a>b, respectively ||
|| `~`, `&`, `!`, `$` || bitwise not, and, or, xor ||
|| `(for lo hi (lambda (n) body))` || fast bounded iteration. the supplied function is invoked successively for n from lo to hi, inclusive. ||

= Standard library =
`label, defun, define, defmacro, identity, map, let, let*, labels, nconc, append, member, functionp, macroexpand-1, macroexpand, =, eql, /=, !=, >, <=, >=, 1+, 1-, mod, abs, caar, cadr, cdar, cddr, caaar, caadr, cadar, caddr, cdaar, cdadr, cddar, cdddr, every, any, listp, nthcdr, list-ref, list*, nlist*, lastcdr, last, map!, mapcar, filter, foldr, foldl, reverse, reduce, copy-list, copy-tree, nreverse, when, unless, dotimes, map-int, iota, error, throw, catch, unwind-protect, setf, revappend, nreconc, list-to-vector, vector-to-list, vector.map, self-evaluating-p, backquote, assert, time`

= Value constructors =
|| *signature* || *description* ||
|| `(cons a b)` || ||
|| `(list ...)` || ||
|| `(vector ...)` || ||
|| `(vector.alloc size [init])` || make a vector of the given size, optionally initializing every element to the given value ||
|| `(array ctype ...)` || make primitive (unboxed) array ||
|| `(c-value ctype [init])` || make c-value of the given type, optionally initialize ||

The following cvalue constructors are also available: `int8, uint8, int16, uint16, int32, uint32, int64, uint64, char, wchar, long, ulong, float, double`

= Environment =
|| done? || *signature* || *description* ||
||Y|| `(intern str)` || intern a string (creates a symbol) ||
||Y|| `(gensym)` || create a unique symbol ||
||Y|| `(set-syntax sym function)` || set the macro expander function for the given head symbol ||
||Y|| `(symbol-syntax sym)` || get the expander for a symbol, or nil if none ||
||Y|| `(syntax-environment)` || get the syntax environment as an assoc list ||
||Y|| `(environment)` || get the global environment as an assoc list ||
||Y|| `(constantp x)` || determine whether an expression is a constant ||
||Y|| `(load filename)` || read and evaluate all expressions in a file ||
||Y|| `(exit)` || quit interpreter ||


= Global variables =
|| *name* || *meaning* ||
|| `*print-pretty*` || enable pretty printing, default is T ||


= Strings =

|| done? || *signature* || *description* ||
|| Y     || `(string a b ...)` || append/construct ||
|| Y     || `(string.inc str index [nchars])` || increment a byte index by n characters (default 1) ||
|| Y     || `(string.dec str index [nchars])` ||  ||
||       || `(string.count str i j)` || # of chars between 2 byte offsets ||
||       || `(string.width str)` || # columns when printed ||
|| Y     || `(string.char str i)` || char at byte offset ||
|| Y     || `(string.sub str i j)` || substring between 2 bytes offsets ||
|| Y     || `(string.split str sep-str)` || split string on characters in sep-str string ||
||       || `(string.trim s at-start at-end)` || remove given chars from beginning and end of string ||
|| Y     || `(string.reverse s)` || ||
||       || `(string.find s str|char)` || ||
||       || `(string.map f str)` || ||

|| Y     || `(string.encode wchar-array)` || convert to UTF8 ||
|| Y     || `(string.decode str)` || convert to UCS ||


= IO Streams =

|| done? || *signature* || *description* ||
|| || `(read [stream])` || ||
||Y|| `(print val ...)` || ||
|| || `(sprint stream val ...)` || ||
||Y|| `(princ val ...)` || ||
|| || `(sprint stream val ...)` || ||
|| || `(file name)` || ||
|| || `(fifo)` || ||
|| || `(memstream size)` || ||
|| || `(stream str)` || ||
|| || `(stream.eof s)` || ||
|| || `(stream.write s cvalue)` || ||
|| || `(stream.read s ctype)` || ||
|| || `(stream.copy to from [nbytes])` || ||
|| || `(stream.copyuntil to from byte)` || ||
|| || `(stream.flush s)` || ||
|| || `(stream.pos s [new-pos])` || ||
|| || `(stream.seek s offset)` || ||
|| || `(stream.seekend s)` || ||
|| || `(stream.trunc s size)` || ||
|| || `(stream.getc s)` || ||
|| || `(stream.tostring! s)` || ||
|| || `(stream.readline)` || ||
|| || `(stream.readlines)` || ||
|| || `(stream.readall)` || ||


= Paths =
|| done? || *signature* || *description* ||
|| || `(path.combine ...)`|| ||
|| || `(path.parts p)` || ||
|| || `(path.absolute p)` || ||
|| || `(path.simplify p)` || ||
|| || `(path.tempdir)` || ||
|| || `(path.tempname)` || ||
|| || `(path.homedir [user])` || ||
||Y|| `(path.cwd [new-cwd])`|| || 


= Time and date =
|| done? || *signature* || *description* ||
||Y|| `(time.now)` || ||
|| || `(time.parts t)` || ||
|| || `(time.fromparts v)`|| ||
||Y|| `(time.string t)`|| ||
|| || `(time.fromstring s)`|| ||

= System =
|| done? || *signature* || *description* ||
||Y|| `(os.name)` || || 
||Y|| `(os.getenv var)` || || 
||Y|| `(os.setenv var [val])` || || 

= Numbers =
|| done? || *signature* || *description* ||
||Y|| `(truncate x)` || convert to integer of appropriate type ||
||Y|| `(fixnum x)` || convert to fixnum ||
||Y|| `(rand)` || ||
||Y|| `(randn)` || ||
||Y|| `(rand.uint32)` || ||
||Y|| `(rand.uint64)` || ||
||Y|| `(rand.double)` || ||
||Y|| `(rand.float)` || ||