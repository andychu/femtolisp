#summary Library and extended functionality reference

= Boolean values =

`#f` is false, and every other value is true. The default truth value is `#t`.

= Builtin special forms =
|| *signature* || *description* ||
|| `(quote val)` || ||
|| `(cond (cond1 do1 do2 ...) (cond2 do1 do2 ...) ...)` || ||
|| `(if cond then else)` || ||
|| `(and ...)` || ||
|| `(or ...)` || ||
|| `(while cond body)` || ||
|| `(lambda args body)` || `args` is a list or dotted list. `body` must be a single expression ||
|| `(begin ...)` || ||
|| `(set! sym expr)` || set lexically-bound variable (sym is not evaluated) ||
|| `(trycatch body func)` || if an exception occurs evaluating `body`, `func` is invoked with the exception as its argument ||

= Standard builtin functions =
`eq?, eqv?, equal?, atom?, not, null?, symbol?, number?, boolean?, bound?, pair?, builtin?, vector?, fixnum?, cons, list, car, cdr, set-car!, set-cdr!, eval, apply, set!, prog1, +, -, *, /, <, aref, aset!, length, assq`

= Nonstandard builtin functions =
|| *signature* || *description* ||
|| `(raise val)` || raise an exception (any value) ||
|| `(compare a b)` || perform an ordered comparison of any two values. returns -1, 0, or 1, for a<b, a==b, and a>b, respectively ||
|| `lognot`, `logand`, `logior`, `logxor` || bitwise not, and, or, xor ||
|| `(for lo hi (lambda (n) body))` || fast bounded iteration. the supplied function is invoked successively for n from lo to hi, inclusive. ||
|| `(eval* expr)` || evaluate in the current environment ||

= Standard library =
`label, define, define-macro, identity, map, let, let*, letrec, nconc, append, assv, assoc, member, memv, memq, function?, macroexpand-1, macroexpand, =, /=, !=, >, <=, >=, 1+, 1-, mod, abs, caar, cadr, cdar, cddr, caaar, caadr, cadar, caddr, cdaar, cdadr, cddar, cdddr, every, any, list?, nthcdr, list-ref, list*, nlist*, lastcdr, last, map!, mapcar, filter, foldr, foldl, reverse, nreverse, copy-list, copy-tree, when, unless, dotimes, map-int, iota, error, throw, catch, unwind-protect, revappend, nreconc, list-to-vector, vector-to-list, vector.map, self-evaluating?, backquote, assert, time, do, case`

= Value constructors =
|| *signature* || *description* ||
|| `(cons a b)` || ||
|| `(list ...)` || ||
|| `(vector ...)` || ||
|| `(vector.alloc size [init])` || make a vector of the given size, optionally initializing every element to the given value ||
|| `(array ctype [elts ...])` || make primitive (unboxed) array ||
|| `(c-value ctype [init])` || make c-value of the given type, optionally initialize ||
|| `(table key val key val ...)` || ||

The following cvalue constructors are also available: `int8, uint8, int16, uint16, int32, uint32, int64, uint64, byte, wchar, long, ulong, float, double`

= Environment =
|| *signature* || *description* ||
|| `(intern str)` || intern a string (creates a symbol) ||
|| `(gensym)` || create a unique symbol ||
|| `(set-syntax sym function)` || set the macro expander function for the given head symbol ||
|| `(symbol-syntax sym)` || get the expander for a symbol, or nil if none ||
|| `(syntax-environment)` || get the syntax environment as an assoc list ||
|| `(environment)` || get the global environment as an assoc list ||
|| `(constant? x)` || determine whether an expression is a constant ||
|| `(load filename)` || read and evaluate all expressions in a file (filename is a string) ||
|| `(exit)` || quit interpreter ||


= Global variables =
|| *name* || *meaning* ||
|| `*install-dir*` || location of femtoLisp executable ||
|| `*argv*` || list of command-line arguments (as strings) ||
|| `*os-name*` || symbol indicating the platform where we're running ||
|| `*print-pretty*` || enable pretty printing, default is #t ||
|| `*print-width*` || number of columns used in prettyprinting, default 80 ||
|| `*stdin*, *stdout*, *stderr*` || io streams for standard descriptors ||
|| `*input-stream*, *output-stream*` || current default io streams ||
|| `*directory-separator*` || the directory separator on the local platform ||


= Strings =

|| done? || *signature* || *description* ||
|| Y     || `(string a b ...)` || append/construct ||
|| Y     || `(string.inc str index [nchars])` || increment a byte index by n characters (default 1) ||
|| Y     || `(string.dec str index [nchars])` ||  ||
|| Y     || `(string.count str i j)` || # of chars between 2 byte offsets ||
||       || `(string.width str)` || # columns when printed ||
|| Y     || `(string.char str i)` || char at byte offset ||
|| Y     || `(string.sub str i j)` || substring between 2 bytes offsets ||
|| Y     || `(string.split str sep-str)` || split string on characters in sep-str string ||
|| Y     || `(string.trim s at-start at-end)` || remove given chars from beginning and end of string ||
|| Y     || `(string.reverse s)` || ||
|| Y     || `(string.find s str|char [start offset])` || ||
||       || `(string.map f str)` || ||
|| Y     || `(string.encode wchar-array)` || convert to UTF8 ||
|| Y     || `(string.decode str)` || convert to UCS ||
|| Y     || `(string.tail str n)` || drop n characters from the front of str ||


= Hash Tables =
Hash tables use `equal` to compare keys.

|| *signature* || *description* ||
|| `(put! table key value)` || add or update key ||
|| `(get table key [default])` || look up key. if the key is not found, an exception is thrown unless a default value is specified, in which case it is returned. ||
|| `(has table key)` || query whether table contains key ||
|| `(del! table key)` || remove a key, throwing an exception if not found ||
|| `(table.foldl f zero table)` || call (f k v X) for successive key/value pairs, where X is the previous result, starting at the given zero ||
|| `(table.keys table)` || ||
|| `(table.pairs table)` || ||
|| `(hash val)` || compute a numeric hash for a value ||

= IO Streams =

|| done? || *signature* || *description* ||
||Y|| `(iostream? x)` || ||
||Y|| `(read [stream])` || ||
||Y|| `(print val ...)` || ||
||Y|| `(io.print stream val ...)` || ||
||Y|| `(princ val ...)` || ||
||Y|| `(io.princ stream val ...)` || ||
||Y|| `(file name [mode options...])` || mode options can be `:read, :write, :append, :create, :truncate` ||
|| || `(memstream size)` || ||
|| || `(stream str)` || ||
||Y|| `(io.eof s)` || ||
|| || `(io.write s cvalue)` || ||
|| || `(io.read s ctype)` || ||
|| || `(io.copy to from [nbytes])` || ||
|| || `(io.copyuntil to from byte)` || ||
||Y|| `(io.flush s)` || ||
|| || `(io.pos s [new-pos])` || ||
|| || `(io.seek s offset)` || ||
|| || `(io.seekend s)` || ||
|| || `(io.trunc s size)` || ||
||Y|| `(io.getc s)` || ||
|| || `(io.tostring! s)` || ||
|| || `(io.readline)` || ||
|| || `(io.readlines)` || ||
|| || `(io.readall)` || ||


= Paths =
|| done? || *signature* || *description* ||
|| || `(path.combine ...)`|| ||
|| || `(path.parts p)` || ||
|| || `(path.absolute p)` || ||
|| || `(path.simplify p)` || ||
|| || `(path.tempdir)` || ||
|| || `(path.tempname)` || ||
|| || `(path.homedir [user])` || ||
||Y|| `(path.cwd [new-cwd])`|| || 


= Time and date =
|| done? || *signature* || *description* ||
||Y|| `(time.now)` || ||
|| || `(time.parts t)` || ||
|| || `(time.fromparts v)`|| ||
||Y|| `(time.string t)`|| ||
|| || `(time.fromstring s)`|| ||

= System =
|| done? || *signature* || *description* ||
||Y|| `(os.getenv var)` || || 
||Y|| `(os.setenv var [val])` || || 

= Numbers =
|| done? || *signature* || *description* ||
||Y|| `(truncate x)` || convert to integer of appropriate type ||
||Y|| `(fixnum x)` || convert to fixnum ||
||Y|| `(integer? x)` || is x integer valued? ||
||Y|| `(rand)` || ||
||Y|| `(rand.uint32)` || ||
||Y|| `(rand.uint64)` || ||
||Y|| `(rand.double)` || ||
||Y|| `(rand.float)` || ||